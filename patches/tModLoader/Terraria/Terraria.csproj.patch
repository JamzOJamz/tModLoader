--- src/TerrariaNetCore/Terraria/Terraria.csproj
+++ src/tModLoader/Terraria/Terraria.csproj
@@ -7,24 +_,27 @@
 		<Company>Re-Logic</Company>
 		<Copyright>Copyright Â© 2022 Re-Logic</Copyright>
 		<RootNamespace>Terraria</RootNamespace>
-		<AssemblyName>Terraria</AssemblyName>
+		<AssemblyName>tModLoader</AssemblyName>
+		<GenerateDocumentationFile>true</GenerateDocumentationFile>
+		<UseAppHost>false</UseAppHost>
 		<GenerateRuntimeConfigDevFile>true</GenerateRuntimeConfigDevFile>
 	</PropertyGroup>
-	<PropertyGroup Condition="$(Configuration.Contains('Server'))">
-		<AssemblyName>$(AssemblyName)Server</AssemblyName>
-	</PropertyGroup>
-	<PropertyGroup Condition="$(Configuration.Contains('Debug'))">
-		<AssemblyName>$(AssemblyName)Debug</AssemblyName>
-	</PropertyGroup>
-	<!-- Avoid overwriting Terraria(Server).exe (if it's not Debug it's release) -->
-	<PropertyGroup Condition="!$(Configuration.Contains('Debug'))">
-		<AssemblyName>$(AssemblyName)Release</AssemblyName>
+	<PropertyGroup>
+		<tMLVersion Condition="'$(TmlVersion)' == ''">9999.0</tMLVersion>
+		<StableVersion Condition="'$(stableVersion)' == ''">0.0</StableVersion>
+		<BuildPurpose Condition="'$(BuildPurpose)' == ''">dev</BuildPurpose>
+		<BranchName Condition="'$(BranchName)' == ''">unknown</BranchName>
+		<BranchName>$(BranchName.Replace("|","-"))</BranchName>
+		<CommitSHA Condition="'$(CommitSHA)' == ''">unknown</CommitSHA>
+		<BuildDate>$([System.DateTime]::UtcNow.ToBinary())</BuildDate>
+		<SourceRevisionId>$(tMLVersion)|$(StableVersion)|$(BranchName)|$(BuildPurpose)|$(CommitSHA)|$(BuildDate)</SourceRevisionId>
 	</PropertyGroup>
 	<PropertyGroup>
 		<OutputName>$(AssemblyName)</OutputName>
-		<ApplicationIcon>Icon.ico</ApplicationIcon>
+		<ApplicationIcon>tModLoader.ico</ApplicationIcon>
 	</PropertyGroup>
 	<ItemGroup>
+		<Reference Include="Ionic.Zip.Reduced" />
 		<ProjectReference Include="../../../FNA/FNA.Core.csproj" />
 		<ProjectReference Include="../ReLogic/ReLogic.csproj" />
 		<EmbeddedResource Include="../ReLogic/bin/$(Configuration)/$(TargetFramework)/ReLogic.dll">
@@ -38,8 +_,13 @@
 		<Reference Include="NVorbis" />
 		<Reference Include="RailSDK.Net" />
 		<Reference Include="SteelSeriesEngineWrapper" />
+		<Reference Include="log4net" />
+		<Reference Include="TerrariaHooks" />
+		<ProjectReference Include="../../../tModPorter/tModPorter/tModPorter.csproj" />
+		<ProjectReference Include="../../../BuildTools/tModLoader.BuildTools.csproj" />
 	</ItemGroup>
 	<ItemGroup>
+		<EmbeddedResource Include="**\*.png" />
 		<EmbeddedResource Include="GameContent/Creative/Content/*" />
 		<EmbeddedResource Include="GameContent/Metadata/MaterialData/*" />
 		<EmbeddedResource Include="GameContent/WorldBuilding/*" />
@@ -48,28 +_,53 @@
 		<EmbeddedResource Include="Microsoft/**" />
 	</ItemGroup>
 	<ItemGroup>
-		<None Remove="Libraries/Mono/**" />
+		<Compile Remove="Libraries/Common/TerrariaHooks.dll" />
 		<None Remove="Libraries/Windows/**" />
 		<None Remove="Libraries/XNA/**" />
 		<Content Include="Libraries/Native/**" CopyToOutputDirectory="PreserveNewest" />
+		<Content Include="release_extras/**" CopyToOutputDirectory="PreserveNewest" Link="%(RecursiveDir)%(Filename)%(Extension)" />
 	</ItemGroup>
 	<ItemGroup>
+		<PackageReference Include="Basic.Reference.Assemblies.Net60" Version="1.2.4" />
+		<PackageReference Include="MonoModReorg.RuntimeDetour" Version="23.3.22.1" />
+		<PackageReference Include="Microsoft.CodeAnalysis.Common" Version="4.2.0" />
+		<PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.2.0" />
+		<PackageReference Include="Microsoft.Win32.Registry" Version="6.0.0-preview.5.21301.5 " />
 		<PackageReference Include="Steamworks.NET" Version="20.1.0" />
+		<PackageReference Include="System.CodeDom" Version="6.0.0" />
+		<PackageReference Include="System.Diagnostics.PerformanceCounter" Version="6.0.0" />
+		<PackageReference Include="Hjson" Version="3.0.0" />
+		<PackageReference Include="System.Reflection.MetadataLoadContext" Version="6.0.0" />
+		<!-- ImageSharp is added as a reference here to generate the path to ImageSharp compiled files (GeneratePathProperty, creates $(PkgSixLabors_ImageSharp)). 
+		This is needed to copy the .netstandard2.0 version of ImageSharp to the BuildTools directory inside Libraries/. If we only had the reference in the BuildTools.csproj (and without PrivateAssets="all"), 
+		the Terraria.csproj would obtain a transitive dependency to ImageSharp and attempt to copy the .netcoreapp3.1 version of ImageSharp to the Libraries/ folder (which was previously 
+		then being copied next to the BuildTools.dll). The .netcoreapp3.1 version of ImageSharp worked when building from Rider or the command line, but failed when building from Visual Studio 
+		as it uses .NET framework 4.something, so the fix was to force the .netstandard2.0 version. -->
+		<!-- ImageSharp is not copied to the Libraries/ folder automatically due to PrivateAssets and ExcludeAssets, this is intended. -->
+		<PackageReference Include="SixLabors.ImageSharp" Version="2.1.5" GeneratePathProperty="true" PrivateAssets="all" ExcludeAssets="all" />
 	</ItemGroup>
 	<PropertyGroup>
-		<_ActualOutputDirectory>$(TerrariaSteamPath)</_ActualOutputDirectory>
+		<_ActualOutputDirectory>$(tModLoaderSteamPath)</_ActualOutputDirectory>
 	</PropertyGroup>
 	<Target Name="CopyToSteamDir" AfterTargets="Build">
+		<Delete Files="$(TargetDir)\tModPorter.runtimeconfig.json" />
+		<Delete Files="$(TargetDir)\tModPorter.deps.json" />
 		<!-- copy files systematically to output folder -->
 		<ItemGroup>
 			<BinFiles Include="$(TargetDir)**" />
 		</ItemGroup>
 		<Message Text="Copying $(AssemblyName) to '$(_ActualOutputDirectory)'..." Importance="high" />
 		<Copy SourceFiles="@(BinFiles)" DestinationFolder="$(_ActualOutputDirectory)/%(RecursiveDir)" SkipUnchangedFiles="True" />
+		<RemoveDir Directories="$(_ActualOutputDirectory)\Content" Condition="!Exists('$(TargetDir)\Content')" />
 		<!-- todo, purge old libraries on other platforms -->
 		<Exec Command="robocopy &quot;$(TargetDir)Libraries&quot; &quot;$(_ActualOutputDirectory)\Libraries&quot; /MIR" ContinueOnError="true" StandardOutputImportance="low" Condition="'$(OS)' == 'Windows_NT'">
 			<Output TaskParameter="ExitCode" PropertyName="PurgeExitCode" />
 		</Exec>
+
+		<!-- Copy the ImageSharp library from the .nuget folder to the BuildTools library folder in tModLoader/Libraries -->
+		<!-- Needed for the BuildTools to be able to convert images to .rawimg that can be packed into the .tmod file -->
+		<Copy SourceFiles="$(PkgSixLabors_ImageSharp)\lib\netstandard2.0\SixLabors.ImageSharp.dll" DestinationFolder="$(_ActualOutputDirectory)/Libraries/tModLoader.BuildTools/1.0.0/" SkipUnchangedFiles="True" />
+
 		<Warning Text="\Libraries file purge failed (robocopy /MIR Exit Code: $(PurgeExitCode)). Old files may not be removed." Condition="'$(PurgeExitCode)' != 2 AND '$(PurgeExitCode)' != 0" />
 	</Target>
 	<!--See first answer in https://stackoverflow.com/questions/55946010/how-to-specify-output-folder-for-the-referenced-nuget-packages for how this was created-->
